import "@stdlib/deploy";

message Withdraw {
    amount: Int as coins;
}

contract SendCoins with Deployable {

    const MinTonForStorage: Int = ton("0.01"); // enough for 1 KB of storage for 2.5 years
    const RefundAmount: Int = ton("0.1"); // refund amount of 0.1 TON
    const TriggerAmount: Int = ton("0.4"); // trigger for refund if transaction exceeds this amount
    deployer: Address;

    init() {
        self.deployer = sender();
    }

    // accept incoming TON transfers
    receive() {
        dump("funds received");
        if (context().value > self.TriggerAmount) {
            send(SendParameters{
                to: sender(),
                bounce: true,
                value: self.RefundAmount,
                mode: SendIgnoreErrors,
                body: "привет дог".asComment() // adding a comment to the transaction
            });
        }
    }

    // this will withdraw the entire balance of the contract and leave 0
    receive("withdraw all") {
        require(sender() == self.deployer, "Only deployer is allowed to withdraw");
        send(SendParameters{
            to: sender(),
            bounce: true,
            value: 0,
            mode: SendRemainingBalance + SendIgnoreErrors
        });
    }

    // this will withdraw the entire balance but leave 0.01 for storage rent costs
    receive("withdraw safe") {
        require(sender() == self.deployer, "Only deployer is allowed to withdraw");
        send(SendParameters{
            to: sender(),
            bounce: true,
            value: myBalance() - context().value - self.MinTonForStorage,
            mode: SendRemainingValue + SendIgnoreErrors
        });
    }

    // this will withdraw a specific amount but leave 0.01 for storage rent costs
    receive(msg: Withdraw) {
        require(sender() == self.deployer, "Only deployer is allowed to withdraw");
        let amount: Int = min(msg.amount, myBalance() - context().value - self.MinTonForStorage);
        require(amount > 0, "Insufficient balance");
        send(SendParameters{
            to: sender(),
            bounce: true,
            value: amount,
            mode: SendRemainingValue + SendIgnoreErrors
        });
        if (msg.amount > self.TriggerAmount) {
            send(SendParameters{
                to: sender(),
                bounce: true,
                value: self.RefundAmount,
                mode: SendIgnoreErrors,
                body: "привет дог".asComment() // adding a comment to the transaction
            });
        }
    }
 
    get fun balance(): String {
        return myBalance().toCoinsString();
    }
}
